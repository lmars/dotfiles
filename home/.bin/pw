#!/usr/bin/env ruby
# A script for storing secrets in the default GNOME keyring
#
# Uses the python gkeyring script:
# https://github.com/kparal/gkeyring

def error(msg)
  $stderr.puts msg
  exit 1
end

unless system('which gkeyring >/dev/null')
  error <<-ERROR

This script relies on gkeyring.

Download and add it to your PATH:
https://github.com/kparal/gkeyring
ERROR
end

require 'ostruct'
options = OpenStruct.new
options.generate = false
options.list     = false

require 'optparse'
opt_parser = OptionParser.new do |o|
  o.banner = "Usage: pw [options] [name]"
  o.separator "Options:"

  o.on('-g', '--generate', 'Generate a random secret') do
    options.generate = true
  end

  o.on('-l', '--list', 'List names of all secrets') do
    options.list = true
  end
end

opt_parser.parse!

name = ARGV.shift

def get(name)
  `gkeyring -p type=pw,name=#{name} -o secret`.strip
end

def get_all
  `gkeyring -p type=pw -o name`.split("\n").map(&:strip)
end

def set(name, secret)
  existing = get(name)

  unless existing.empty?
    error "#{name} already exists"
  end

  if system("gkeyring --set --name #{name} -p type=pw,name=#{name} -w #{secret} >/dev/null")
    puts 'OK'
  else
    error "Couldn't set #{name}"
  end
end

if options.list
  puts get_all.sort.join("\n")
  exit
end

if options.generate
  require 'securerandom'
  secret = SecureRandom.hex

  if name
    set(name, secret)
  else
    puts secret
  end

  exit
end

if name
  secret = get(name)

  if secret.empty?
    error "Couldn't find #{name}"
  else
    puts secret
  end

  exit
end

puts opt_parser
exit 1
