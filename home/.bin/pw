#!/usr/bin/env ruby
# A script for storing secrets in GNOME keyrings
#
# Uses the python gkeyring script:
# https://github.com/kparal/gkeyring

def error(msg)
  $stderr.puts msg
  exit 1
end

unless system('which gkeyring >/dev/null')
  error <<-ERROR

This script relies on gkeyring.

Download and add it to your PATH:
https://github.com/kparal/gkeyring
ERROR
end

class GnomeKeyring
  class KeyExists < Exception; end
  class KeyNotSet < Exception; end

  def initialize(name)
    @name = name
  end

  def get(key)
    `gkeyring -k #{@name} -p type=pw,name=#{key} -o secret`.strip
  end

  def get_all
    `gkeyring -k #{@name} -p type=pw -o name`.split("\n").map(&:strip)
  end

  def set(key, secret)
    existing = get(key)

    unless existing.empty?
      raise KeyExists
    end

    unless system("gkeyring -k #{@name} --set --name #{key} -p type=pw,name=#{key} -w #{secret} >/dev/null")
      raise KeyNotSet
    end
  end
end

require 'ostruct'
options = OpenStruct.new
options.generate = false
options.keyring  = 'login'
options.list     = false
options.secret   = nil

require 'optparse'
opt_parser = OptionParser.new do |o|
  o.banner = "Usage: pw [options] [name]"
  o.separator "Options:"

  o.on('-g', '--generate', 'Generate a random secret') do
    options.generate = true
  end

  o.on('-k', '--keyring KEYRING', 'Use specified KEYRING (defaults to "login")') do |keyring|
    options.keyring = keyring
  end

  o.on('-l', '--list', 'List names of all secrets') do
    options.list = true
  end

  o.on('-s', '--secret SECRET', "Set the secret (if it doesn't exist)") do |secret|
    options.secret = secret
  end
end

opt_parser.parse!

name    = ARGV.shift
keyring = GnomeKeyring.new(options.keyring)

if options.list
  puts keyring.get_all.sort.join("\n")
  exit
end

if options.generate
  require 'securerandom'
  secret = SecureRandom.hex

  if name
    begin
      keyring.set(name, secret)
      puts 'OK'
    rescue GnomeKeyring::KeyExists
      error "#{name} already exists"
    rescue GnomeKeyring::KeyNotSet
      error "Couldn't set #{name}"
    end
  else
    puts secret
  end

  exit
end

if name && options.secret
  keyring.set(name, options.secret)
  exit
end

if name
  secret = keyring.get(name)

  if secret.empty?
    error "Couldn't find #{name}"
  else
    puts secret
  end

  exit
end

puts opt_parser
exit 1
